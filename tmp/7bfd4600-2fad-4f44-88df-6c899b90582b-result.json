{"name": "id为空删除商品失败", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testmain.TestMain object at 0x000001AE2555A1C0>\nParameters = {'assert_way': 'message', 'casename': 'id为空删除商品失败', 'content_type': 'application/x-www-form-urlencoded', 'data': 'id=', ...}\n\n    @allure.feature(\"收藏\")\n    @allure.story(\"删除收藏\")\n    @pytest.mark.parametrize(\"Parameters\", usersAttentionGoods_delete_cases, ids=usersAttentionGoods_delete_casename)\n    def test_usersAttentionGoods_delete(self, Parameters):\n        allure.dynamic.title(Parameters['casename'])  # 测试用例名称\n>       Favorites().favorites_delete(Parameters)\n\n..\\main\\testmain.py:272: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Okmarts_test_front.mode.Favorites.Favorites object at 0x000001AE255CF040>\nParameters = {'assert_way': 'message', 'casename': 'id为空删除商品失败', 'content_type': 'application/x-www-form-urlencoded', 'data': 'id=', ...}\n\n    def favorites_delete(self, Parameters):\n        casename = Parameters['casename']\n        print(f'当前执行用例为{casename}')\n        url = Parameters['url']\n        data = Parameters['data']\n        content_type = Parameters[\"content_type\"]\n        result = Parameters['result']\n        assert_way = Parameters['assert_way']\n    \n        header = {'Host': '18.118.13.94:8080', 'Connection': 'keep-alive', 'Accept': 'application/json,text/plain,*/*',\n                  'X-Access-Token': f'{self.token}',\n                  'Content-Type': f'{content_type}',\n                  'User-Agent': f'{self.User_Agent}', 'Origin': 'http://18.118.13.94:81',\n                  'Referer': 'http://18.118.13.94:81/',\n                  'Accept-Encoding': 'gzip,deflate',\n                  'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6', 'sec-gpc': '1'}\n    \n        if 'id=' in data:\n            print('参数中存在id')\n            if 'id' in casename or 'ID' in casename or 'Id' in casename or 'iD' in casename:  # 如果id在用例中则跳过\n                print('特殊用例不修改ID参数')\n            else:\n                old_id = re.findall(pattern='id=(\\d+)', string=data)[0]\n                print(old_id)\n                new_id = random.choice(Common().get_favorites_infos())['id']\n                data = data.replace(old_id, new_id)\n                print(f'替换{old_id}为{new_id}')\n        if 'ids=' in data:\n            print('参数中存在ids')\n            print(data)\n            if casename in ['参数为空删除失败', '参数错误删除失败']:\n                print('特殊用例，不执行修改操作')\n            else:\n                old_ids = data.split('=')[-1]\n                print(old_ids)\n                new_ids = Common().Splicing_id(2, Common().get_favorites_ids())\n                data = data.replace(old_ids, new_ids)\n                print(f'替换{old_ids}为{new_ids}')\n    \n        print(data)\n        if 'POST' in casename:\n            res = self.sess.post(url=url + '?' + data, headers=header)\n            print('入口1')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'GET' in casename:\n            res = self.sess.get(url=url + '?' + data, headers=header)\n            print('入口2')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'PUT' in casename:\n            res = self.sess.put(url=url + '?' + data, headers=header)\n            print('入口3')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif '未登录' in casename:\n            res = requests.delete(url=url + '?' + data)\n            print('入口4')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        else:\n            res = self.sess.delete(url=url + '?' + data, headers=header)\n            print('入口0')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n>           assert result in res.json()[assert_way]\nE           AssertionError\n\n..\\mode\\Favorites.py:128: AssertionError"}, "attachments": [{"name": "stdout", "source": "1a58f13b-64ac-4cbd-b9ea-18b48fecb914-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "Parameters", "value": "{'casename': 'id为空删除商品失败', 'url': 'http://18.118.13.94:81/jeecg-boot/sys/api/usersAttentionGoods/delete', 'data': 'id=', 'content_type': 'application/x-www-form-urlencoded', 'result': '操作失败', 'assert_way': 'message', 'mode': '用户收藏商品表-通过id删除'}"}], "start": 1648892588388, "stop": 1648892589174, "uuid": "545fd597-14d5-42cb-9914-7957141c969f", "historyId": "885c97347758823a09cbe513d963e882", "testCaseId": "46870e67e9cff83c42f212ec794bef7b", "fullName": "main.testmain.TestMain#test_usersAttentionGoods_delete", "labels": [{"name": "feature", "value": "收藏"}, {"name": "story", "value": "删除收藏"}, {"name": "epic", "value": "O&Kmarts 前端接口测试用例"}, {"name": "parentSuite", "value": "main"}, {"name": "suite", "value": "testmain"}, {"name": "subSuite", "value": "TestMain"}, {"name": "host", "value": "DESKTOP-NB3FDE0"}, {"name": "thread", "value": "10872-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "main.testmain"}]}