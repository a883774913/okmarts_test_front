{
  "uid" : "2b97711515d068cc",
  "name" : "未登录状态删除商品失败",
  "fullName" : "main.testmain.TestMain#test_usersAttentionGoods_delete",
  "historyId" : "06296d40ef00c0a06763fd5c085eed34",
  "time" : {
    "start" : 1648892578834,
    "stop" : 1648892581222,
    "duration" : 2388
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <testmain.TestMain object at 0x000001AE255CF430>\nParameters = {'assert_way': 'message', 'casename': '未登录状态删除商品失败', 'content_type': 'application/x-www-form-urlencoded', 'data': 'id=1508656644457922561', ...}\n\n    @allure.feature(\"收藏\")\n    @allure.story(\"删除收藏\")\n    @pytest.mark.parametrize(\"Parameters\", usersAttentionGoods_delete_cases, ids=usersAttentionGoods_delete_casename)\n    def test_usersAttentionGoods_delete(self, Parameters):\n        allure.dynamic.title(Parameters['casename'])  # 测试用例名称\n>       Favorites().favorites_delete(Parameters)\n\n..\\main\\testmain.py:272: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Okmarts_test_front.mode.Favorites.Favorites object at 0x000001AE255CF0A0>\nParameters = {'assert_way': 'message', 'casename': '未登录状态删除商品失败', 'content_type': 'application/x-www-form-urlencoded', 'data': 'id=1508656644457922561', ...}\n\n    def favorites_delete(self, Parameters):\n        casename = Parameters['casename']\n        print(f'当前执行用例为{casename}')\n        url = Parameters['url']\n        data = Parameters['data']\n        content_type = Parameters[\"content_type\"]\n        result = Parameters['result']\n        assert_way = Parameters['assert_way']\n    \n        header = {'Host': '18.118.13.94:8080', 'Connection': 'keep-alive', 'Accept': 'application/json,text/plain,*/*',\n                  'X-Access-Token': f'{self.token}',\n                  'Content-Type': f'{content_type}',\n                  'User-Agent': f'{self.User_Agent}', 'Origin': 'http://18.118.13.94:81',\n                  'Referer': 'http://18.118.13.94:81/',\n                  'Accept-Encoding': 'gzip,deflate',\n                  'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6', 'sec-gpc': '1'}\n    \n        if 'id=' in data:\n            print('参数中存在id')\n            if 'id' in casename or 'ID' in casename or 'Id' in casename or 'iD' in casename:  # 如果id在用例中则跳过\n                print('特殊用例不修改ID参数')\n            else:\n                old_id = re.findall(pattern='id=(\\d+)', string=data)[0]\n                print(old_id)\n                new_id = random.choice(Common().get_favorites_infos())['id']\n                data = data.replace(old_id, new_id)\n                print(f'替换{old_id}为{new_id}')\n        if 'ids=' in data:\n            print('参数中存在ids')\n            print(data)\n            if casename in ['参数为空删除失败', '参数错误删除失败']:\n                print('特殊用例，不执行修改操作')\n            else:\n                old_ids = data.split('=')[-1]\n                print(old_ids)\n                new_ids = Common().Splicing_id(2, Common().get_favorites_ids())\n                data = data.replace(old_ids, new_ids)\n                print(f'替换{old_ids}为{new_ids}')\n    \n        print(data)\n        if 'POST' in casename:\n            res = self.sess.post(url=url + '?' + data, headers=header)\n            print('入口1')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'GET' in casename:\n            res = self.sess.get(url=url + '?' + data, headers=header)\n            print('入口2')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'PUT' in casename:\n            res = self.sess.put(url=url + '?' + data, headers=header)\n            print('入口3')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif '未登录' in casename:\n            res = requests.delete(url=url + '?' + data)\n            print('入口4')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n>           assert result in res.json()[assert_way]\nE           AssertionError\n\n..\\mode\\Favorites.py:121: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "xunit_setup_class_fixture_TestMain",
    "time" : {
      "start" : 1648891876991,
      "stop" : 1648892011835,
      "duration" : 134844
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <testmain.TestMain object at 0x000001AE255CF430>\nParameters = {'assert_way': 'message', 'casename': '未登录状态删除商品失败', 'content_type': 'application/x-www-form-urlencoded', 'data': 'id=1508656644457922561', ...}\n\n    @allure.feature(\"收藏\")\n    @allure.story(\"删除收藏\")\n    @pytest.mark.parametrize(\"Parameters\", usersAttentionGoods_delete_cases, ids=usersAttentionGoods_delete_casename)\n    def test_usersAttentionGoods_delete(self, Parameters):\n        allure.dynamic.title(Parameters['casename'])  # 测试用例名称\n>       Favorites().favorites_delete(Parameters)\n\n..\\main\\testmain.py:272: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Okmarts_test_front.mode.Favorites.Favorites object at 0x000001AE255CF0A0>\nParameters = {'assert_way': 'message', 'casename': '未登录状态删除商品失败', 'content_type': 'application/x-www-form-urlencoded', 'data': 'id=1508656644457922561', ...}\n\n    def favorites_delete(self, Parameters):\n        casename = Parameters['casename']\n        print(f'当前执行用例为{casename}')\n        url = Parameters['url']\n        data = Parameters['data']\n        content_type = Parameters[\"content_type\"]\n        result = Parameters['result']\n        assert_way = Parameters['assert_way']\n    \n        header = {'Host': '18.118.13.94:8080', 'Connection': 'keep-alive', 'Accept': 'application/json,text/plain,*/*',\n                  'X-Access-Token': f'{self.token}',\n                  'Content-Type': f'{content_type}',\n                  'User-Agent': f'{self.User_Agent}', 'Origin': 'http://18.118.13.94:81',\n                  'Referer': 'http://18.118.13.94:81/',\n                  'Accept-Encoding': 'gzip,deflate',\n                  'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6', 'sec-gpc': '1'}\n    \n        if 'id=' in data:\n            print('参数中存在id')\n            if 'id' in casename or 'ID' in casename or 'Id' in casename or 'iD' in casename:  # 如果id在用例中则跳过\n                print('特殊用例不修改ID参数')\n            else:\n                old_id = re.findall(pattern='id=(\\d+)', string=data)[0]\n                print(old_id)\n                new_id = random.choice(Common().get_favorites_infos())['id']\n                data = data.replace(old_id, new_id)\n                print(f'替换{old_id}为{new_id}')\n        if 'ids=' in data:\n            print('参数中存在ids')\n            print(data)\n            if casename in ['参数为空删除失败', '参数错误删除失败']:\n                print('特殊用例，不执行修改操作')\n            else:\n                old_ids = data.split('=')[-1]\n                print(old_ids)\n                new_ids = Common().Splicing_id(2, Common().get_favorites_ids())\n                data = data.replace(old_ids, new_ids)\n                print(f'替换{old_ids}为{new_ids}')\n    \n        print(data)\n        if 'POST' in casename:\n            res = self.sess.post(url=url + '?' + data, headers=header)\n            print('入口1')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'GET' in casename:\n            res = self.sess.get(url=url + '?' + data, headers=header)\n            print('入口2')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'PUT' in casename:\n            res = self.sess.put(url=url + '?' + data, headers=header)\n            print('入口3')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif '未登录' in casename:\n            res = requests.delete(url=url + '?' + data)\n            print('入口4')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n>           assert result in res.json()[assert_way]\nE           AssertionError\n\n..\\mode\\Favorites.py:121: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "840684f2a71dcb8a",
      "name" : "stdout",
      "source" : "840684f2a71dcb8a.txt",
      "type" : "text/plain",
      "size" : 443
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_TestMain::0",
    "time" : {
      "start" : 1648893620785,
      "stop" : 1648893639450,
      "duration" : 18665
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "收藏"
  }, {
    "name" : "story",
    "value" : "删除收藏"
  }, {
    "name" : "epic",
    "value" : "O&Kmarts 前端接口测试用例"
  }, {
    "name" : "parentSuite",
    "value" : "main"
  }, {
    "name" : "suite",
    "value" : "testmain"
  }, {
    "name" : "subSuite",
    "value" : "TestMain"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "10872-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "main.testmain"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameters",
    "value" : "{'casename': '未登录状态删除商品失败', 'url': 'http://18.118.13.94:81/jeecg-boot/sys/api/usersAttentionGoods/delete', 'data': 'id=1508656644457922561', 'content_type': 'application/x-www-form-urlencoded', 'result': '未获取到用户', 'assert_way': 'message', 'mode': '用户收藏商品表-通过id删除'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "2b97711515d068cc.json",
  "parameterValues" : [ "{'casename': '未登录状态删除商品失败', 'url': 'http://18.118.13.94:81/jeecg-boot/sys/api/usersAttentionGoods/delete', 'data': 'id=1508656644457922561', 'content_type': 'application/x-www-form-urlencoded', 'result': '未获取到用户', 'assert_way': 'message', 'mode': '用户收藏商品表-通过id删除'}" ]
}