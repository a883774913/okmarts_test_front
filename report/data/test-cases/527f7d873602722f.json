{
  "uid" : "527f7d873602722f",
  "name" : "已领取账户再次领取优惠券失败",
  "fullName" : "main.testmain.TestMain#test_registerCoupons",
  "historyId" : "706e2d22290f6844a7d46dbdc21ed7ee",
  "time" : {
    "start" : 1648892912303,
    "stop" : 1648892912825,
    "duration" : 522
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <testmain.TestMain object at 0x000001AE25FCC8B0>\nParameters = {'assert_way': 'message', 'casename': '已领取账户再次领取优惠券失败', 'content_type': 'application/x-www-form-urlencoded', 'data': 'name=979172251@qq.com', ...}\n\n    @allure.feature(\"优惠券\")\n    @allure.story(\"注册优惠券\")\n    @pytest.mark.parametrize(\"Parameters\", registerCoupons_cases, ids=registerCoupons_casename)\n    def test_registerCoupons(self, Parameters):\n        allure.dynamic.title(Parameters['casename'])  # 测试用例名称\n>       RegisterCoupons().registerCoupons(Parameters)\n\n..\\main\\testmain.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\mode\\registerCoupons.py:44: in registerCoupons\n    get(self.sess, casename, url, data, header, result, assert_way)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsess = <requests.sessions.Session object at 0x000001AE2544A550>\ncasename = '已领取账户再次领取优惠券失败'\nurl = 'http://18.118.13.94:81/jeecg-boot/sys/api/users/registerCoupons'\ndata = 'name=979172251@qq.com'\nheader = {'Accept': 'application/json,text/plain,*/*', 'Accept-Encoding': 'gzip,deflate', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6', 'Connection': 'keep-alive', ...}\nresult = '操作失败', assert_way = 'message'\n\n    def get(sess,casename,url,data,header,result,assert_way):\n        if 'POST' in casename:\n            res = sess.post(url=url + '?' + data, headers=header)\n            print('入口1')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'DELETE' in casename:\n            res = sess.delete(url=url + '?' + data, headers=header)\n            print('入口2')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'PUT' in casename:\n            res = sess.put(url=url + '?' + data, headers=header)\n            print('入口3')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif '未登录' in casename:\n            res = requests.get(url=url + '?' + data)\n            print('入口4')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        else:\n            res = sess.get(url=url + '?' + data, headers=header)\n            print('入口0')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            print(res.url)\n>           assert result in res.json()[assert_way]\nE           AssertionError\n\n..\\mode\\get_mode.py:43: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "xunit_setup_class_fixture_TestMain",
    "time" : {
      "start" : 1648891876991,
      "stop" : 1648892011835,
      "duration" : 134844
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <testmain.TestMain object at 0x000001AE25FCC8B0>\nParameters = {'assert_way': 'message', 'casename': '已领取账户再次领取优惠券失败', 'content_type': 'application/x-www-form-urlencoded', 'data': 'name=979172251@qq.com', ...}\n\n    @allure.feature(\"优惠券\")\n    @allure.story(\"注册优惠券\")\n    @pytest.mark.parametrize(\"Parameters\", registerCoupons_cases, ids=registerCoupons_casename)\n    def test_registerCoupons(self, Parameters):\n        allure.dynamic.title(Parameters['casename'])  # 测试用例名称\n>       RegisterCoupons().registerCoupons(Parameters)\n\n..\\main\\testmain.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\mode\\registerCoupons.py:44: in registerCoupons\n    get(self.sess, casename, url, data, header, result, assert_way)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsess = <requests.sessions.Session object at 0x000001AE2544A550>\ncasename = '已领取账户再次领取优惠券失败'\nurl = 'http://18.118.13.94:81/jeecg-boot/sys/api/users/registerCoupons'\ndata = 'name=979172251@qq.com'\nheader = {'Accept': 'application/json,text/plain,*/*', 'Accept-Encoding': 'gzip,deflate', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6', 'Connection': 'keep-alive', ...}\nresult = '操作失败', assert_way = 'message'\n\n    def get(sess,casename,url,data,header,result,assert_way):\n        if 'POST' in casename:\n            res = sess.post(url=url + '?' + data, headers=header)\n            print('入口1')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'DELETE' in casename:\n            res = sess.delete(url=url + '?' + data, headers=header)\n            print('入口2')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif 'PUT' in casename:\n            res = sess.put(url=url + '?' + data, headers=header)\n            print('入口3')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif '未登录' in casename:\n            res = requests.get(url=url + '?' + data)\n            print('入口4')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        else:\n            res = sess.get(url=url + '?' + data, headers=header)\n            print('入口0')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            print(res.url)\n>           assert result in res.json()[assert_way]\nE           AssertionError\n\n..\\mode\\get_mode.py:43: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9ac8a438f04d1a6e",
      "name" : "stdout",
      "source" : "9ac8a438f04d1a6e.txt",
      "type" : "text/plain",
      "size" : 669
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_TestMain::0",
    "time" : {
      "start" : 1648893620785,
      "stop" : 1648893639450,
      "duration" : 18665
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "注册优惠券"
  }, {
    "name" : "feature",
    "value" : "优惠券"
  }, {
    "name" : "epic",
    "value" : "O&Kmarts 前端接口测试用例"
  }, {
    "name" : "parentSuite",
    "value" : "main"
  }, {
    "name" : "suite",
    "value" : "testmain"
  }, {
    "name" : "subSuite",
    "value" : "TestMain"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "10872-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "main.testmain"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameters",
    "value" : "{'casename': '已领取账户再次领取优惠券失败', 'url': 'http://18.118.13.94:81/jeecg-boot/sys/api/users/registerCoupons', 'data': 'name=979172251@qq.com', 'content_type': 'application/x-www-form-urlencoded', 'result': '操作失败', 'assert_way': 'message', 'mode': '注册成功领取优惠券'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "527f7d873602722f.json",
  "parameterValues" : [ "{'casename': '已领取账户再次领取优惠券失败', 'url': 'http://18.118.13.94:81/jeecg-boot/sys/api/users/registerCoupons', 'data': 'name=979172251@qq.com', 'content_type': 'application/x-www-form-urlencoded', 'result': '操作失败', 'assert_way': 'message', 'mode': '注册成功领取优惠券'}" ]
}