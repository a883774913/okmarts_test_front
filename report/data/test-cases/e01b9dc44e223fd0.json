{
  "uid" : "e01b9dc44e223fd0",
  "name" : "count为空提交订单失败",
  "fullName" : "main.testmain.TestMain#test_submitOrder",
  "historyId" : "df30ea1a076cf258b96f4c4ddbbc2cf3",
  "time" : {
    "start" : 1648892393663,
    "stop" : 1648892396840,
    "duration" : 3177
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <testmain.TestMain object at 0x000001AE24FCFA90>\nParameters = {'assert_way': 'message', 'casename': 'count为空提交订单失败', 'content_type': 'application/json', 'data': '{\"addressId\":\"1503240416043077632\",\"couponsid\":\"\",\"list\":[{\"count\":null,\"shopCartId\":\"1506078550173900802\"}],\"remark\":\"\"}', ...}\n\n    @allure.feature(\"提交订单\")\n    @pytest.mark.parametrize(\"Parameters\", submitOrder_cases, ids=submitOrder_casename)\n    def test_submitOrder(self, Parameters):\n        allure.dynamic.title(Parameters['casename'])  # 测试用例名称\n>       order().order(Parameters)\n\n..\\main\\testmain.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\mode\\order.py:51: in order\n    post(sess=self.sess, casename=casename, url=url, data=data, header=header, result=result,assert_way=assert_way,content_type=content_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsess = <requests.sessions.Session object at 0x000001AE2541F190>\ncasename = 'count为空提交订单失败'\nurl = 'http://18.118.13.94:81/jeecg-boot/my/shoppingCart/submitOrder'\ndata = '{\"addressId\":\"1510189694921609216\",\"couponsid\":\"1503214205115006977\",\"list\":[{\"count\":null,\"shopCartId\":\"1510188209692467201\"}],\"remark\":\"\"}'\nheader = {'Accept': 'application/json,text/plain,*/*', 'Accept-Encoding': 'gzip,deflate', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6', 'Connection': 'keep-alive', ...}\nresult = '操作失败', assert_way = 'message', content_type = 'application/json'\n\n    def post(sess,casename, url, data, header, result, assert_way, content_type):\n        \"\"\"\n        :param sess: 会话\n        :param casename: 用例名称\n        :param url: 地址\n        :param data: data数据\n        :param header: 请求头\n        :param result: 测试预期结果\n        :param assert_way: 断言方式\n        :param content_type: content-type\n        :return:\n        \"\"\"\n    \n        if \"GET\" in casename:\n            res = sess.get(url=url, data=data.encode('utf-8'), headers=header)\n            print('入口 2')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif \"PUT\" in casename:\n            res = sess.put(url=url, data=data.encode('utf-8'), headers=header)\n            print('入口 3')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif \"DELETE\" in casename:\n            res = sess.delete(url=url, data=data.encode('utf-8'), headers=header)\n            print('入口 4')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif '未登录' in casename:\n            header = {'Host': '18.118.13.94:8080', 'Connection': 'keep-alive', 'Content-Length': '64',\n                      'X-Access-Token': 'null',\n                      'Accept': 'application/json,text/plain,*/*',\n                      'User-Agent': 'Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/99.0.4844.51Safari/537.36Edg/99.0.1150.39',\n                      'Content-Type': f'{content_type};charset=UTF-8', 'Origin': 'http://18.118.13.94:81',\n                      'Referer': 'http://18.118.13.94:81/', 'Accept-Encoding': 'gzip,deflate',\n                      'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6', 'sec-gpc': '1'}\n            res = requests.post(url=url, headers=header, data=data.encode('utf-8'))\n            print('入口 5')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        else:\n            res = sess.post(url=url, data=data.encode('utf-8'), headers=header)\n            print('入口 0')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n>           assert result in res.json()[assert_way]\nE           AssertionError\n\n..\\mode\\Post_mode.py:62: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "xunit_setup_class_fixture_TestMain",
    "time" : {
      "start" : 1648891876991,
      "stop" : 1648892011835,
      "duration" : 134844
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <testmain.TestMain object at 0x000001AE24FCFA90>\nParameters = {'assert_way': 'message', 'casename': 'count为空提交订单失败', 'content_type': 'application/json', 'data': '{\"addressId\":\"1503240416043077632\",\"couponsid\":\"\",\"list\":[{\"count\":null,\"shopCartId\":\"1506078550173900802\"}],\"remark\":\"\"}', ...}\n\n    @allure.feature(\"提交订单\")\n    @pytest.mark.parametrize(\"Parameters\", submitOrder_cases, ids=submitOrder_casename)\n    def test_submitOrder(self, Parameters):\n        allure.dynamic.title(Parameters['casename'])  # 测试用例名称\n>       order().order(Parameters)\n\n..\\main\\testmain.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\mode\\order.py:51: in order\n    post(sess=self.sess, casename=casename, url=url, data=data, header=header, result=result,assert_way=assert_way,content_type=content_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsess = <requests.sessions.Session object at 0x000001AE2541F190>\ncasename = 'count为空提交订单失败'\nurl = 'http://18.118.13.94:81/jeecg-boot/my/shoppingCart/submitOrder'\ndata = '{\"addressId\":\"1510189694921609216\",\"couponsid\":\"1503214205115006977\",\"list\":[{\"count\":null,\"shopCartId\":\"1510188209692467201\"}],\"remark\":\"\"}'\nheader = {'Accept': 'application/json,text/plain,*/*', 'Accept-Encoding': 'gzip,deflate', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6', 'Connection': 'keep-alive', ...}\nresult = '操作失败', assert_way = 'message', content_type = 'application/json'\n\n    def post(sess,casename, url, data, header, result, assert_way, content_type):\n        \"\"\"\n        :param sess: 会话\n        :param casename: 用例名称\n        :param url: 地址\n        :param data: data数据\n        :param header: 请求头\n        :param result: 测试预期结果\n        :param assert_way: 断言方式\n        :param content_type: content-type\n        :return:\n        \"\"\"\n    \n        if \"GET\" in casename:\n            res = sess.get(url=url, data=data.encode('utf-8'), headers=header)\n            print('入口 2')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif \"PUT\" in casename:\n            res = sess.put(url=url, data=data.encode('utf-8'), headers=header)\n            print('入口 3')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif \"DELETE\" in casename:\n            res = sess.delete(url=url, data=data.encode('utf-8'), headers=header)\n            print('入口 4')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        elif '未登录' in casename:\n            header = {'Host': '18.118.13.94:8080', 'Connection': 'keep-alive', 'Content-Length': '64',\n                      'X-Access-Token': 'null',\n                      'Accept': 'application/json,text/plain,*/*',\n                      'User-Agent': 'Mozilla/5.0(WindowsNT10.0;Win64;x64)AppleWebKit/537.36(KHTML,likeGecko)Chrome/99.0.4844.51Safari/537.36Edg/99.0.1150.39',\n                      'Content-Type': f'{content_type};charset=UTF-8', 'Origin': 'http://18.118.13.94:81',\n                      'Referer': 'http://18.118.13.94:81/', 'Accept-Encoding': 'gzip,deflate',\n                      'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6', 'sec-gpc': '1'}\n            res = requests.post(url=url, headers=header, data=data.encode('utf-8'))\n            print('入口 5')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n            assert result in res.json()[assert_way]\n        else:\n            res = sess.post(url=url, data=data.encode('utf-8'), headers=header)\n            print('入口 0')\n            print(res.json())\n            print(f'预期结果为 {result}')\n            print(f'实际结果为 {res.json()[assert_way]}')\n>           assert result in res.json()[assert_way]\nE           AssertionError\n\n..\\mode\\Post_mode.py:62: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e133df3b1f4b6f67",
      "name" : "stdout",
      "source" : "e133df3b1f4b6f67.txt",
      "type" : "text/plain",
      "size" : 2493
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_TestMain::0",
    "time" : {
      "start" : 1648893620785,
      "stop" : 1648893639450,
      "duration" : 18665
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "O&Kmarts 前端接口测试用例"
  }, {
    "name" : "feature",
    "value" : "提交订单"
  }, {
    "name" : "parentSuite",
    "value" : "main"
  }, {
    "name" : "suite",
    "value" : "testmain"
  }, {
    "name" : "subSuite",
    "value" : "TestMain"
  }, {
    "name" : "host",
    "value" : "DESKTOP-NB3FDE0"
  }, {
    "name" : "thread",
    "value" : "10872-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "main.testmain"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "Parameters",
    "value" : "{'casename': 'count为空提交订单失败', 'url': 'http://18.118.13.94:81/jeecg-boot/my/shoppingCart/submitOrder', 'data': '{\"addressId\":\"1503240416043077632\",\"couponsid\":\"\",\"list\":[{\"count\":null,\"shopCartId\":\"1506078550173900802\"}],\"remark\":\"\"}', 'content_type': 'application/json', 'result': '操作失败', 'assert_way': 'message', 'mode': '购物车表-购买提交订单'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e01b9dc44e223fd0.json",
  "parameterValues" : [ "{'casename': 'count为空提交订单失败', 'url': 'http://18.118.13.94:81/jeecg-boot/my/shoppingCart/submitOrder', 'data': '{\"addressId\":\"1503240416043077632\",\"couponsid\":\"\",\"list\":[{\"count\":null,\"shopCartId\":\"1506078550173900802\"}],\"remark\":\"\"}', 'content_type': 'application/json', 'result': '操作失败', 'assert_way': 'message', 'mode': '购物车表-购买提交订单'}" ]
}